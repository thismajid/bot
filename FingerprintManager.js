import fs from "node:fs/promises";
import fsSync from "node:fs";
import path from "node:path";

const FINGERPRINT_QUEUE_FILE = "fingerprint_queue.json";
const FINGERPRINT_STATS_FILE = "fingerprint_stats.json";

// ÿ≥ÿßÿÆÿ™ÿßÿ± ÿØÿßÿØŸá ÿ®ÿ±ÿß€å ŸÖÿØ€åÿ±€åÿ™ ÿµŸÅ ŸÅ€åŸÜ⁄Øÿ±Ÿæÿ±€åŸÜÿ™‚ÄåŸáÿß
export default class FingerprintManager {
    constructor(kameleoClient) {
        this.client = kameleoClient; // ÿßÿ∂ÿßŸÅŸá ⁄©ÿ±ÿØŸÜ client ÿ®Ÿá ⁄©ŸÑÿßÿ≥
        this.queue = [];
        this.currentIndex = 0;
        this.stats = {};
    }

    // ÿ®ÿßÿ±⁄Øÿ∞ÿßÿ±€å Ÿàÿ∂ÿπ€åÿ™ ÿßÿ≤ ŸÅÿß€åŸÑ
    async loadState() {
        try {
            // ÿ®ÿßÿ±⁄Øÿ∞ÿßÿ±€å ÿµŸÅ
            if (fsSync.existsSync(FINGERPRINT_QUEUE_FILE)) {
                const queueData = await fs.readFile(FINGERPRINT_QUEUE_FILE, "utf8");
                const parsed = JSON.parse(queueData);
                this.queue = parsed.queue || [];
                this.currentIndex = parsed.currentIndex || 0;
            }

            // ÿ®ÿßÿ±⁄Øÿ∞ÿßÿ±€å ÿ¢ŸÖÿßÿ±
            if (fsSync.existsSync(FINGERPRINT_STATS_FILE)) {
                const statsData = await fs.readFile(FINGERPRINT_STATS_FILE, "utf8");
                this.stats = JSON.parse(statsData);
            }

            console.log(`üìä Loaded ${this.queue.length} fingerprints, current index: ${this.currentIndex}`);
            
        } catch (err) {
            console.log("Error loading fingerprint state:", err.message);
            await this.initializeQueue();
        }
    }

    // ÿ∞ÿÆ€åÿ±Ÿá Ÿàÿ∂ÿπ€åÿ™ ÿØÿ± ŸÅÿß€åŸÑ
    async saveState() {
        try {
            const queueData = {
                queue: this.queue,
                currentIndex: this.currentIndex,
                lastUpdated: new Date().toISOString()
            };

            await fs.writeFile(FINGERPRINT_QUEUE_FILE, JSON.stringify(queueData, null, 2), "utf8");
            await fs.writeFile(FINGERPRINT_STATS_FILE, JSON.stringify(this.stats, null, 2), "utf8");

        } catch (err) {
            console.log("Error saving fingerprint state:", err.message);
        }
    }

    // ŸÖŸÇÿØÿßÿ±ÿØŸá€å ÿßŸàŸÑ€åŸá ÿµŸÅ ÿ®ÿß ŸÅ€åŸÜ⁄Øÿ±Ÿæÿ±€åŸÜÿ™‚ÄåŸáÿß€å ÿ¨ÿØ€åÿØ
    async initializeQueue() {
        try {
            console.log("üîÑ Initializing fingerprint queue...");
            
            // ÿßÿ≥ÿ™ŸÅÿßÿØŸá ÿßÿ≤ this.client ÿ®Ÿá ÿ¨ÿß€å client
            const fingerprints = await this.client.fingerprint.searchFingerprints("desktop", "windows", "chrome");
            const windowsFingerprints = fingerprints.filter(item => item.os.version === '10');
            
            // ŸÖÿÆŸÑŸàÿ∑ ⁄©ÿ±ÿØŸÜ ŸÅ€åŸÜ⁄Øÿ±Ÿæÿ±€åŸÜÿ™‚ÄåŸáÿß ÿ®ÿ±ÿß€å ÿ™Ÿàÿ≤€åÿπ ÿ®Ÿáÿ™ÿ±
            this.queue = this.shuffleArray([...windowsFingerprints]);
            this.currentIndex = 0;
            this.stats = {};

            // ŸÖŸÇÿØÿßÿ±ÿØŸá€å ÿ¢ŸÖÿßÿ±
            this.queue.forEach(fp => {
                this.stats[fp.id] = {
                    usageCount: 0,
                    lastUsed: null,
                    fingerprintInfo: {
                        userAgent: fp.userAgent,
                        screen: fp.screen,
                        language: fp.language
                    }
                };
            });

            await this.saveState();
            console.log(`‚úÖ Initialized queue with ${this.queue.length} fingerprints`);

        } catch (err) {
            console.log("Error initializing fingerprint queue:", err.message);
            throw err;
        }
    }

    // ŸÖÿÆŸÑŸàÿ∑ ⁄©ÿ±ÿØŸÜ ÿ¢ÿ±ÿß€åŸá (Fisher-Yates shuffle)
    shuffleArray(array) {
        const shuffled = [...array];
        for (let i = shuffled.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
        }
        return shuffled;
    }

    // ⁄Øÿ±ŸÅÿ™ŸÜ ŸÅ€åŸÜ⁄Øÿ±Ÿæÿ±€åŸÜÿ™ ÿ®ÿπÿØ€å ÿßÿ≤ ÿµŸÅ
    async getNextFingerprint() {
        try {
            await this.loadState();

            if (this.queue.length === 0) {
                await this.initializeQueue();
            }

            // ÿß⁄Øÿ± ÿ®Ÿá ÿßŸÜÿ™Ÿáÿß€å ÿµŸÅ ÿ±ÿ≥€åÿØ€åŸÖÿå ÿßÿ≤ ÿßŸàŸÑ ÿ¥ÿ±Ÿàÿπ ⁄©ŸÜ
            if (this.currentIndex >= this.queue.length) {
                console.log("üîÑ Reached end of queue, restarting from beginning...");
                this.currentIndex = 0;
                
                // ŸÖÿÆŸÑŸàÿ∑ ⁄©ÿ±ÿØŸÜ ŸÖÿ¨ÿØÿØ ÿ®ÿ±ÿß€å ÿ™ŸÜŸàÿπ ÿ®€åÿ¥ÿ™ÿ±
                this.queue = this.shuffleArray(this.queue);
                console.log("üîÄ Queue reshuffled for next round");
            }

            const selectedFingerprint = this.queue[this.currentIndex];
            
            // ÿ®Ÿá‚Äåÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å ÿ¢ŸÖÿßÿ±
            this.stats[selectedFingerprint.id].usageCount++;
            this.stats[selectedFingerprint.id].lastUsed = new Date().toISOString();

            // ÿ≠ÿ±⁄©ÿ™ ÿ®Ÿá ŸÅ€åŸÜ⁄Øÿ±Ÿæÿ±€åŸÜÿ™ ÿ®ÿπÿØ€å
            this.currentIndex++;

            await this.saveState();

            console.log(`üéØ Selected fingerprint ${this.currentIndex}/${this.queue.length}: ${selectedFingerprint.id}`);
            console.log(`üìä Usage count: ${this.stats[selectedFingerprint.id].usageCount}`);

            return selectedFingerprint;

        } catch (err) {
            console.log("Error getting next fingerprint:", err.message);
            throw err;
        }
    }

    // ŸÜŸÖÿß€åÿ¥ ÿ¢ŸÖÿßÿ± ÿßÿ≥ÿ™ŸÅÿßÿØŸá
    async showStats() {
        await this.loadState();
        
        console.log("\nüìä Fingerprint Usage Statistics:");
        console.log("=".repeat(50));

        const sortedStats = Object.entries(this.stats)
            .sort(([,a], [,b]) => b.usageCount - a.usageCount);

        sortedStats.forEach(([fingerprintId, stats], index) => {
            const lastUsed = stats.lastUsed ? 
                new Date(stats.lastUsed).toLocaleString('fa-IR') : 
                'Never';
            
            console.log(`${index + 1}. ID: ${fingerprintId.substring(0, 8)}... | Uses: ${stats.usageCount} | Last: ${lastUsed}`);
        });

        const totalUsage = sortedStats.reduce((sum, [,stats]) => sum + stats.usageCount, 0);
        const avgUsage = totalUsage / sortedStats.length;
        
        console.log("=".repeat(50));
        console.log(`Total fingerprints: ${sortedStats.length}`);
        console.log(`Total usage: ${totalUsage}`);
        console.log(`Average usage per fingerprint: ${avgUsage.toFixed(2)}`);
        console.log(`Current queue position: ${this.currentIndex}/${this.queue.length}`);
    }

    // ÿ±€åÿ≥ÿ™ ⁄©ÿ±ÿØŸÜ ÿ¢ŸÖÿßÿ± (ÿßÿÆÿ™€åÿßÿ±€å)
    async resetStats() {
        try {
            Object.keys(this.stats).forEach(fpId => {
                this.stats[fpId].usageCount = 0;
                this.stats[fpId].lastUsed = null;
            });

            this.currentIndex = 0;
            this.queue = this.shuffleArray(this.queue);

            await this.saveState();
            console.log("‚úÖ Fingerprint stats reset successfully");

        } catch (err) {
            console.log("Error resetting stats:", err.message);
        }
    }

    // ÿ®ÿ±ÿ±ÿ≥€å ÿ™ÿπÿßÿØŸÑ ÿßÿ≥ÿ™ŸÅÿßÿØŸá
    async checkBalance() {
        await this.loadState();
        
        const usageCounts = Object.values(this.stats).map(s => s.usageCount);
        const minUsage = Math.min(...usageCounts);
        const maxUsage = Math.max(...usageCounts);
        const difference = maxUsage - minUsage;

        console.log(`‚öñÔ∏è Usage balance: Min=${minUsage}, Max=${maxUsage}, Difference=${difference}`);
        
        if (difference <= 1) {
            console.log("‚úÖ Perfect balance achieved!");
        } else if (difference <= 3) {
            console.log("‚úÖ Good balance");
        } else {
            console.log("‚ö†Ô∏è Imbalanced usage detected");
        }

        return { minUsage, maxUsage, difference, isBalanced: difference <= 1 };
    }
}

